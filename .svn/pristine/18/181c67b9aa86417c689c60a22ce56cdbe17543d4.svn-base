var Product = require('../../../models/product');
var Category = require('../../../models/category');
var _ = require('underscore');
var fs = require('fs');
var path = require('path');
var ueditor = require("ueditor");


Array.prototype.indexOf = function(val) {
    for (var i = 0; i < this.length; i++) {
        if (this[i] == val) return i;
    }
    return -1;
};
Array.prototype.remove = function(val) {
    var index = this.indexOf(val);
    if (index > -1) {
        this.splice(index, 1);
    }
};


//detail page
exports.detail = function (req, res) {
    var id = req.params.id;

    Product.update({_id: id},{$inc: {pv: 1}},function(err){
        if(err) {
            console.log(err);
        }
    });

    Product.findById(id, function(err,product){

        res.render('cp/views/home/detail',{
            title: product.title,
            product:product
        });
        if (err) {
            console.log(err);
        }

    })
};

//admin page
exports.add = function (req, res) {
    Category.find({}, function (err, categories) {
        var categories_arr =[];
        categories.forEach(function(cat){
            cat._id= cat._id.toString();
            if(cat.level == 1){
                categories_arr.push(cat);
            }
        });
        res.render('cp/views/home/add',{
            title:'',
            detail:'',
            name:'',
            categories:categories_arr,
            product:{
                poster:[],
                img_file: Date.now()
            }
        })
    });

};

//admin update product
exports.update = function (req, res) {
    var id = req.params.id;
    var categories_arr = []
    Category.fetch(function(err,categories){
        if (err) {
            console.log(err);
        }
        categories.forEach(function(cat){
            cat._id= cat._id.toString();
            if(cat.level == 1){
                categories_arr.push(cat);
            }
        });
        Product.findById(id,function(err,product){
            if (err) {
                console.log(err);
            }
            product.category = eval(product.category);

            res.render('cp/views/home/add',{
                title:'iproduct 列表页',
                product:product,
                categories:categories_arr
            })
        });


    });

    //console.log("product:",req.body.product);

};

//admin poster
exports.savePoster = function (req, res, next) {
    var posterData = req.files.uploadPoster;
    var img_file;

    if(typeof req.body.product.img_file == 'string'){
        img_file = req.body.product.img_file;
        //console.log("img_file:",img_file);
    }else{
        img_file = Date.now();
    }
    if(!posterData){
        next();
    }else{
        req.poster=[];
        if(posterData.length){
            posterData.forEach(function (item, index) {
                var originalFilename = item.originalFilename;
                var filePath = item.path;
                if (originalFilename) {
                    fs.readFile(filePath, function(err, data) {
                        var timestamp = Date.now();
                        var type = item.type.split('/')[1];
                        var poster = timestamp + index + '.' + type;
                        var _path = path.join(__dirname, '../../../../', '/public/uploads/'+img_file +'/');
                        fs.exists(_path, function(exists){
                            //console.log("exists:",exists);
                            if(!exists) {
                                fs.mkdir(_path, function (err) {
                                    if(err) {
                                        console.log(err);
                                    }else{
                                        var newPath = _path + poster;
                                        fs.writeFile(newPath, data, function(err) {
                                            if(err){console.log(err)};
                                            req.poster.push(poster);
                                            if(req.poster.length == posterData.length){
                                                next()
                                            }
                                        })
                                    }
                                })
                            }else{
                                var newPath = _path + poster;
                                fs.writeFile(newPath, data, function(err) {
                                    if(err){console.log(err)};
                                    req.poster.push(poster);
                                    console.log(req.poster,index);
                                    if(req.poster.length == posterData.length){
                                        next()
                                    }
                                })
                            }
                        });

                    })
                }
            })
        }else{
            next();
        }
    }
    //var filePath = posterData.path;
    //var originalFilename = posterData.originalFilename;
    console.log("uploadPoster:",posterData);
};

// admin post product
exports.save = function (req, res) {

    var id = req.body._id,
        productObj = req.body.product,
        old_category = req.body.old_category,
        categoryId = productObj.category,
        _product;
    //console.log("savePoster:",req.poster);

    if(req.poster){
        productObj.poster = req.poster;
    }

    if (id) {
        Product.findById(id, function(err, product) {
            if (err) {
                console.log(err);
            }
            _product = _.extend(product, productObj);


            _product.save(function(err, product) {
                if (err) {
                    console.log(err);
                }

                if(old_category!=productObj.category){

                    Category.findById(categoryId, function (err, category) {

                        category.products.push(product._id);
                        category.save(function (err) {
                            if(err){console.log(err)}
                            /*product.category = category._id;
                            product.save(function (err, product) {


                            });*/


                        })
                    });

                    Category.findById(old_category, function (err,doc) {
                        doc.products.remove(id);
                        doc.save(function (err, cate) {
                            //return res.redirect('/product/' + product._id);
                        });
                        //console.log("newDate:",newDate);

                    });

                }

                res.redirect('/product/' + product._id);
            })
        })
    }
    else {

        //console.log("productObj:",productObj);
        //return false;


        _product = new Product(productObj);

        console.log("products:",_product);


        var categoryName = productObj.category_name;

        _product.save(function(err, product) {
            if (err) {
                console.log(err);
            }
            if (categoryId){
                Category.findById(categoryId, function (err, category) {

                    category.products.push(product._id);
                    category.save(function (err, category) {
                        if(err){console.log(err)}
                        product.category = category._id;
                        product.save(function (err, product) {
                            res.redirect('/product/' + product._id);
                        });

                    })
                });
            }
            else if (categoryName){
                var category = new Category({
                    name: categoryName,
                    products: [product._id]
                });
                category.save(function (err, category) {
                    product.category._id = category._id;
                    product.save(function (err, product) {
                        res.redirect('/product/' + product._id);
                    });

                })

            }


        })
    }
};

//list page
exports.list = function (req, res) {
    Product.fetch(function(err,products){
        if (err) {
            console.log(err);
        }

        res.render('cp/views/home/items',{
            title:'iproduct 列表页',
            product:products
        })
    })
};



//list delete product
exports.del = function (req, res) {
    var id = req.query.id;
    var category_id = req.query.category_id;

    if (id && category_id) {
        Category.findById(category_id, function (err,doc) {
            doc.products.remove(id);
            doc.save(function (err, cate) {
                console.log("saveOk!");
            });
            //console.log("newDate:",newDate);
        });
        Product.remove({_id:id},function(err,product){
            console.log("images:",product);
            if (err) {
                console.log(err);
            }
            else{
                res.json({success:1});
            }
        })
    }
};

exports.delImg = function (req, res) {
    var id = req.query.id;
    var img_id = req.query.img_id;
    if(id && img_id){
        Product.findById(id, function (err, doc) {
            doc.poster.remove(img_id);

            doc.save(function (err) {
                res.json({success:1});
            })

        })
    }
};

exports.editor = ueditor(path.join(__dirname,'../../../../', 'public'), function(req, res, next) {
    var dir_name = Date.now();
    // ueditor 客户发起上传图片请求
    if (req.query.action === 'uploadimage') {
        var _key = req.query.key;
        var foo = req.ueditor;

        var date = new Date();
        var imgname = req.ueditor.filename;

        var img_url = '/uploads/'+_key;
        res.ue_up(img_url); //你只要输入要保存的地址 。保存操作交给ueditor来做
    }
    //  客户端发起图片列表请求
    else if (req.query.action === 'listimage') {
        var _key = req.query.key;
        var dir_url = '/uploads/' + _key;
        res.ue_list(dir_url); // 客户端会列出 dir_url 目录下的所有图片
    }
    // 客户端发起其它请求
    else {
        // console.log('config.json')
        res.setHeader('Content-Type', 'application/json');
        res.redirect('/ueditor/nodejs/config.json');
    }
})